{% block operator_functions %}

def generate_eda_profile():
    if dag.owner == 'CloudTDMS':
        df = pd.read_csv(f"{get_profiling_data_home()}/{dag.params.get('data_file')}.csv")
        path = f"{get_reports_home()}/{dag.params.get('data_file')}"
    else:
        df = pd.read_csv(f"{get_profiling_data_home()}/{dag.owner}/{dag.params.get('data_file')}.csv")
        path = f"{get_reports_home()}/{dag.owner}/{dag.params.get('data_file')}"

    profile = ProfileReport(
        df.loc[0:10000], title=f"CloudTDMS Exploratory Data Analysis", explorative=True
    )

    try:
        os.makedirs(path)
    except FileExistsError:
        pass
    profile.to_file(f"{path}/profiling_{dag.params.get('data_file')}.html")

def generate_sensitive_data_profile():
    if dag.owner == 'CloudTDMS':
        df = pd.read_csv(f"{get_profiling_data_home()}/{dag.params.get('data_file')}.csv")
        path = f"{get_reports_home()}/{dag.params.get('data_file')}"
    else:
        df = pd.read_csv(f"{get_profiling_data_home()}/{dag.owner}/{dag.params.get('data_file')}.csv")
        path = f"{get_reports_home()}/{dag.owner}/{dag.params.get('data_file')}"

    column_mapping = {str(f).lower().replace(' ', '_'):f for f in df.columns}
    columns =  list(column_mapping.keys()) #list(map(lambda x : str(x).lower().replace(' ', '_'), df.columns))
    df.columns = columns
    profile = PIIReport(
        df.loc[0:10000], filename=dag.params.get('data_file'), title=f"CloudTDMS Sensitive Data Report", explorative=True,
        column_mapping = column_mapping, prefix = f"{dag.owner}/{dag.params.get('data_file')}"
    )
    try:
        os.makedirs(path)
    except FileExistsError:
        pass
    profile.to_file(f"{path}/pii_{dag.params.get('data_file')}.html")

def email_reports():
    email = SMTPEmail()
    email.add_attachments(directory_path=f"{get_reports_home()}/{dag.params.get('data_file')}", file_format='.html')
    email.send_email()

{% endblock operator_functions %}