#!/usr/bin/python

#  Copyright (c) 2020. Cloud Innovation Partners (CIP)
#  CloudTDMS - Test Data Management Service
#  Installation Script for Ubuntu 18.04
#   ____ _                 _ _____ ____  __  __ ____
#  / ___| | ___  _   _  __| |_   _|  _ \|  \/  / ___|
# | |   | |/ _ \| | | |/ _` | | | | | | | |\/| \___ \
# | |___| | (_) | |_| | (_| | | | | |_| | |  | |___) |
#  \____|_|\___/ \__,_|\__,_| |_| |____/|_|  |_|____/
#

import sys
import os
import pwd
import shutil
import subprocess

figlet = """
  ____ _                 _ _____ ____  __  __ ____  
 / ___| | ___  _   _  __| |_   _|  _ \|  \/  / ___| 
| |   | |/ _ \| | | |/ _` | | | | | | | |\/| \___ \ 
| |___| | (_) | |_| | (_| | | | | |_| | |  | |___) |
 \____|_|\___/ \__,_|\__,_| |_| |____/|_|  |_|____/ 

"""

AIRFLOW_HOME = f"/home/cloudtdms/system"

TEMPLATE = """
#
# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements. See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership. The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# “License”); you may not use this file except in compliance
# with the License. You may obtain a copy of the License at
# 
# http://www.apache.org/licenses/LICENSE-2.0
# 
# Unless required by applicable law or agreed to in writing,
# software distributed under the License is distributed on an
# “AS IS” BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
# KIND, either express or implied. See the License for the
# specific language governing permissions and limitations
# under the License.
[Unit]
Description={{ DESCRIPTION }}
After=network.target {{ AFTER }}
Wants={{ WANTS }}
[Service]
EnvironmentFile=/etc/environment
User={{ USER }}
Group={{ GROUP }}
Type=simple
ExecStart= {{ EXE }}
Restart={{ RESTART }}
RestartSec=300s
PrivateTmp=true
[Install]
WantedBy=multi-user.target
"""


def check_python_version():
    if sys.version_info.major >= 3:
        print("Python version : {}.{}.{}".format(
            sys.version_info.major, sys.version_info.minor, sys.version_info.micro
        ))
    else:
        print("""
_______________________________________________________________
                INSTALLATION TERMINATED                        
_______________________________________________________________
You have Python version : {}.{}.{}
cloudtdms uses latest version of Airflow, which requires you to have
python 3.6 or above, please make sure you have requirements full filled
for further details checkout the docs section
""".format(sys.version_info.major, sys.version_info.minor, sys.version_info.micro).upper())
        exit(1)


def install_packages_from_requirement_file():
    print('Installing requirements...')
    basepath = os.path.abspath(os.path.dirname(__file__))
    subprocess.check_call(["sudo", "-H", "/usr/bin/python", "-m", "pip", "install", "-r", f"{basepath}/requirements.txt"])


def set_airflow_home_as_environment():

    global AIRFLOW_HOME

    os.environ["AIRFLOW_HOME"] = AIRFLOW_HOME

    subprocess.Popen(["sed -i '/AIRFLOW_HOME/d' /etc/environment"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable="/bin/bash").communicate()

    subprocess.Popen(["sed -i '0,/PATH/ a\\AIRFLOW_HOME=\\\"{}\\\"' /etc/environment".format(AIRFLOW_HOME)],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable="/bin/bash").communicate()

    subprocess.Popen(["source /etc/environment"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable="/bin/bash").communicate()


def airflow_resetdb():
    print('Resetting airflow meta-database')
    subprocess.Popen(["airflow resetdb -y"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()


def airflow_initdb():
    print('Initializing airflow meta-database')
    env = os.environ
    env['AIRFLOW_HOME'] = AIRFLOW_HOME
    subprocess.Popen(["airflow initdb"], cwd=os.getcwd(), env=env,
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()


def create_service_user_group():
    print('Creating group cloudtdms...')
    subprocess.Popen(["groupadd -r --system cloudtdms"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()

    print('Creating user cloudtdms...')
    subprocess.Popen(["useradd --shell=/bin/false -g cloudtdms -r cloudtdms"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()

    user_id = os.environ['SUDO_UID']
    subprocess.Popen([f"usermod -aG cloudtdms {pwd.getpwuid(int(user_id)).pw_name}"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()


def change_ownership_permissions():
    dirname = '/home/cloudtdms'
    subprocess.Popen([f"chown -R cloudtdms:cloudtdms {dirname} & chmod -R ug+rw {dirname}"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()


def create_system_service_entries():
    from jinja2 import Template
    import shutil

    with open('/etc/systemd/system/airflow-webserver.service', 'w') as f:
        template = Template(TEMPLATE)

        output = template.render(

            DESCRIPTION='airflow web server service',
            USER="cloudtdms",
            GROUP="cloudtdms",
            EXE=str(shutil.which('airflow')) + ' webserver',
            RESTART='on-failure'
        )

        f.write(output)

    with open('/etc/systemd/system/airflow-scheduler.service', 'w') as f:
        template = Template(TEMPLATE)

        output = template.render(

            DESCRIPTION='airflow scheduler service',
            USER="cloudtdms",
            GROUP="cloudtdms",
            EXE=str(shutil.which('airflow')) + ' scheduler',
            RESTART='always'
        )

        f.write(output)


def reload_enable__airflow_webserver_service():
    print("Enabling Airflow Web Server....")

    subprocess.Popen(["systemctl daemon-reload ; systemctl enable airflow-webserver.service"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()


def reload_enable_airflow_scheduler_service():
    print("Enabling Airflow Scheduler....")

    subprocess.Popen(["systemctl daemon-reload ; systemctl enable airflow-scheduler.service"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()


def start_airflow():
    print("starting CloudTDMS...")
    # subprocess.Popen(["service airflow-webserver start"],
    #                  universal_newlines=True, stdout=subprocess.PIPE, shell=True,
    #                  executable='/bin/bash').communicate()
    subprocess.Popen(["service airflow-scheduler start"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()


def modify_configuration():
    print("replacing values in configuration...")
    basepath = os.path.abspath(os.path.dirname(__file__))
    subprocess.Popen(["sed -i 's|/opt/cloudtdms|/home/cloudtdms|g' /home/cloudtdms/system/airflow.cfg"],
                     universal_newlines=True, stdout=subprocess.PIPE, shell=True,
                     executable='/bin/bash').communicate()


def copy():
    cwd = os.getcwd()
    directories = ['config', 'data', 'user-data', 'profiling_data', 'profiling_reports']
    for d in directories:
        try:
            os.makedirs(f"/home/cloudtdms/{d}")
        except FileExistsError:
            print(f"{d} : File exists already !")
    if os.path.exists("/home/cloudtdms/config_default.yaml"):
        print("found existing config_default.yaml file")
        shutil.copy('/home/cloudtdms/config_default.yaml', f'/home/cloudtdms/config_default.yaml.bak')
    shutil.copy("config_default.yaml", "/home/cloudtdms/")
    shutil.copy("__init__.py", "/home/cloudtdms/")
    try:
        shutil.copytree("system", "/home/cloudtdms/system")
    except FileExistsError:
        print("system : Folder exists already!")
        print("Updating system folder..")
        shutil.rmtree("/home/cloudtdms/system")
        shutil.copytree("system", "/home/cloudtdms/system")


def install_pre_requisite():
    import apt
    import sys

    pkg_name = "llvm-10-dev"

    cache = apt.cache.Cache()
    cache.update()
    cache.open()

    pkg = cache[pkg_name]
    if pkg.is_installed:
        print("{pkg_name} already installed".format(pkg_name=pkg_name))
    else:
        pkg.mark_install()

        try:
            cache.commit()
        except Exception as  arg:
            print >> sys.stderr, "Sorry, package installation failed [{err}]".format(err=str(arg))


if __name__ == "__main__":
    print("Initiating Installation process...")
    print(figlet)

    # ensure python3
    if sys.version_info.major >= 3:
        print("Python version : {}.{}.{}".format(
            sys.version_info.major, sys.version_info.minor, sys.version_info.micro
        ))
    else:
        print("""
    _______________________________________________________________
                    INSTALLATION TERMINATED                        
    _______________________________________________________________
    You have Python version : {}.{}.{}
    cloudtdms uses latest version of Airflow, which requires you to have
    python 3.6 or above, please make sure you have requirements full filled
    for further details checkout the docs section
    """.format(sys.version_info.major, sys.version_info.minor, sys.version_info.micro).upper())
        exit(1)

    # # install python-apt
    # os.system("sudo -H python -m pip install python-apt")
    #
    # # install llvm-10-dev
    #
    # import apt
    # import sys
    import time
    #
    # pkg_name = "llvm-10-dev"
    #
    # cache = apt.cache.Cache()
    # cache.update()
    # cache.open()
    #
    # pkg = cache[pkg_name]
    # if pkg.is_installed:
    #     print("{pkg_name} already installed".format(pkg_name=pkg_name))
    # else:
    #     pkg.mark_install()
    #
    #     try:
    #         cache.commit()
    #     except Exception as  arg:
    #         print >> sys.stderr, "Sorry, package installation failed [{err}]".format(err=str(arg))
    # try:
    #     os.symlink("/usr/bin/llvm-config-10", "/usr/bin/llvm-config")
    # except:
    #     print('symlink for llvm-config already exists!')
    #
    # ensure pip 9.0.1
    os.system("sudo -H python -m pip install pip==9.0.1")

    # install numpy
    #os.system("sudo -H python -m pip install numpy==1.19.2")

    if os.path.exists('ubuntu_requirements.txt'):
        try:
            install_packages_from_requirement_file()
        except subprocess.CalledProcessError:
            print("process terminated by OS..")
            print("retrying in 5 seconds...")
            time.sleep(5)
            install_packages_from_requirement_file()

        # os.system("sudo -H python -m pip install --ignore-installed PyYAML==5.3.1")
        # os.system("sudo -H python -m pip install --ignore-installed cryptography==3.1")
        # os.system("sudo -H python -m pip install --ignore-installed attrs==19.3.0")
        # os.system("sudo -H python -m pip install --ignore-installed click==7.1.2")
        # os.system("sudo -H python -m pip install --ignore-installed colorama==0.4.3")
        # os.system("sudo -H python -m pip install --ignore-installed idna==2.10")
        # os.system("sudo -H python -m pip install --ignore-installed Jinja2==2.11.2")
        # os.system("sudo -H python -m pip install --ignore-installed jsonschema==3.2.0")
        # os.system("sudo -H python -m pip install --ignore-installed MarkupSafe==1.1.1")
        # os.system("sudo -H python -m pip install --ignore-installed PyJWT==1.7.1")
        # os.system("sudo -H python -m pip install --ignore-installed PyYAML==5.3.1")
        # os.system("sudo -H python -m pip install --ignore-installed requests==2.24.0")
        # os.system("sudo -H python -m pip install --ignore-installed urllib3==1.25.10")
        # os.system("sudo -H python -m pip install --ignore-installed zope.deprecation==4.4.0")
    else:
        print('ubuntu_requirements.txt NotFound !')
        print('Aborting...')
        exit()
    # install_packages_from_requirement_file()
    create_service_user_group()
    copy()
    set_airflow_home_as_environment()
    modify_configuration()

    change_ownership_permissions()
    if os.path.exists(f"{AIRFLOW_HOME}/airflow.db"):
        airflow_resetdb()
    else:
        airflow_initdb()
    change_ownership_permissions()
    create_system_service_entries()
    reload_enable__airflow_webserver_service()
    reload_enable_airflow_scheduler_service()
    start_airflow()
